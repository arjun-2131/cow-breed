# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J22Uj3HSmU4g-UcQBpsg5tNRq-tJVW-a
"""

import numpy as np
from keras.models import Sequential,Model
from keras.layers import Convolution2D,MaxPooling2D,GlobalAveragePooling2D
from keras.layers import Activation,Dropout,Flatten,Dense,BatchNormalization
from keras import backend as K
from keras.preprocessing import image
from keras import applications
from keras.callbacks import ModelCheckpoint,EarlyStopping

from keras.preprocessing.image import ImageDataGenerator,array_to_img,img_to_array,load_img
from keras.applications.xception import preprocess_input
import seaborn as sns
sns.set(color_codes=True)

batch_size=10
num_classes=6
epochs=100
img_width,img_height=256,256

from google.colab import drive
drive.mount('/content/drive')

train_data_dir="/content/drive/My Drive/cow/train"
validation_data_dir="/content/drive/My Drive/cow/valid"
test_data_dir="/content/drive/My Drive/cow/test"

train_datagen=ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
    )

model=applications.xception.Xception(include_top=False,
                                      weights='imagenet',
                                      input_shape=(img_width,img_height,3))

x=model.output
x=GlobalAveragePooling2D()(x)
x=BatchNormalization()(x)
x=Dense(1024,activation='relu')(x)
x=BatchNormalization()(x)
x=Dropout(0.5)(x)
y_pred=Dense(6,activation='softmax')(x)

model_final=Model(inputs=model.input,outputs=y_pred)
model_final.summary()

for layers in model.layers[:126]:
  layers.trainable=False
for layer in model.layers[126:]:
  layer.trainable=True

train_datagen=ImageDataGenerator(
              rescale=1./255,
              shear_range=0.2,
              zoom_range=0.2,
              horizontal_flip=True)
test_datagen=ImageDataGenerator(rescale=1./255)

train_generator=train_datagen.flow_from_directory(train_data_dir,
                                                 target_size=(img_width,img_height),
                                                 batch_size=batch_size,
                                                 class_mode='categorical')
validation_generator=test_datagen.flow_from_directory(validation_data_dir,
                                                 target_size=(img_width,img_height),
                                                 batch_size=batch_size,
                                                 class_mode='categorical')
test_generator=test_datagen.flow_from_directory(test_data_dir,
                                                 target_size=(img_width,img_height),
                                                 batch_size=batch_size,
                                                 class_mode='categorical')

model_final.compile(loss='categorical_crossentropy',
                   optimizer='nadam',
                   metrics=['accuracy'])

top_model_weight_path='/content/drive/My Drive/cow/Saved_Models/cow_Xception(V3).h5'
checkpoint=ModelCheckpoint(filepath=top_model_weight_path,
                          verbose=1,
                            save_best_only=True,
                          monitor='val_acc')
early=EarlyStopping(monitor='val_acc',min_delta=0,patience=5,verbose=1,mode='auto')

history=model_final.fit_generator(
              train_generator,
                steps_per_epoch=457//batch_size,
              epochs=epochs,
                validation_data=validation_generator,
                validation_steps=49//batch_size,
                callbacks=[checkpoint,early])

scores,acc=model_final.evaluate_generator(test_generator,steps=12)

img=image.load_img("/content/drive/My Drive/cow/im1ages.jpeg")
target_size=(256,256)
if img.size!=target_size:
  img=img.resize(target_size)
x=image.img_to_array(img)
x=np.expand_dims(x,axis=0)
x=preprocess_input(x)
preds=model_final.predict(x)
print("probabilities for sindhi,ongole,kangrej,khillari,gir,bargur:",preds[0])

print (acc*100)

print(model_final.metrics_names)